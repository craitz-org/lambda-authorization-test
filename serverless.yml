frameworkVersion: '2 || 3'

custom:
  lambda_name: lambda-authorization-test-${opt:stage, 'dev'}

service: ${self:custom.lambda_name}

provider:
  name: aws
  apiName: ${self:custom.lambda_name}-api
  endpointType: REGIONAL
  lambdaHashingVersion: 20201221
  stackName: ${self:custom.lambda_name}
  runtime: nodejs14.x
  role: arn:aws:iam::248567781489:role/lambda-authorizer-role
  deploymentBucket:
    name: craitzus-veliti
  environment:
    STAGE: ${opt:stage, 'dev'}

functions:
  func:
    handler: index.handler
    name: ${self:custom.lambda_name}
    memorySize: 256
    timeout: 30
    description: Test with secure endpoint
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1        
    package:
      individually: true
      patterns:
        - '!.serverless/**'
        - '!test/**'
        - '!*.http'
        - '!template.yml'
        - '!config.*.json'
        - '!package*.json'
    events:
      - http:
          path: test-auth
          method: get
          authorizer:
            arn: arn:aws:cognito-idp:us-east-1:248567781489:userpool/us-east-1_5jQpJgMno
          cors: true
          integration: lambda
          response:
            statusCodes:
              200:
                pattern: ''
              401:
                pattern: '.*"httpStatus":401.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }
              500:
                pattern: '.*"httpStatus":500.*'
                template: >
                  #set($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))

                  {
                      "statusCode": $errorMessageObj.httpStatus,
                      "type": "$errorMessageObj.type",
                      "cause": "$errorMessageObj.cause"
                  }                  